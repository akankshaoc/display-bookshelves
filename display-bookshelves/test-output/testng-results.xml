<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="33" passed="29" failed="4" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-02-28T12:37:09 IST" name="Default suite" finished-at="2024-02-28T12:38:44 IST" duration-ms="95262">
    <groups>
      <group name="customer_and_recipient_details">
        <method signature="GiftCardTests.negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" name="negativeCustomerAndRecipientTest" class="test_scenarios.GiftCardTests"/>
        <method signature="GiftCardTests.positiveCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" name="positiveCustomerAndRecipientTest" class="test_scenarios.GiftCardTests"/>
      </group> <!-- customer_and_recipient_details -->
      <group name="zip_code_test">
        <method signature="GiftCardTests.positiveZipCodeTest(java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" name="positiveZipCodeTest" class="test_scenarios.GiftCardTests"/>
      </group> <!-- zip_code_test -->
      <group name="customise_form_test">
        <method signature="GiftCardTests.negativeAmountTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" name="negativeAmountTest" class="test_scenarios.GiftCardTests"/>
        <method signature="GiftCardTests.negativeButtonAmountTest(java.lang.Integer,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" name="negativeButtonAmountTest" class="test_scenarios.GiftCardTests"/>
        <method signature="GiftCardTests.negativeDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" name="negativeDateTest" class="test_scenarios.GiftCardTests"/>
        <method signature="GiftCardTests.positiveAmounTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" name="positiveAmounTest" class="test_scenarios.GiftCardTests"/>
        <method signature="GiftCardTests.positiveButtonAmountTest(java.lang.Integer,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" name="positiveButtonAmountTest" class="test_scenarios.GiftCardTests"/>
        <method signature="GiftCardTests.positiveDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" name="positiveDateTest" class="test_scenarios.GiftCardTests"/>
      </group> <!-- customise_form_test -->
    </groups>
    <test started-at="2024-02-28T12:37:09 IST" name="Default test" finished-at="2024-02-28T12:38:44 IST" duration-ms="95262">
      <class name="test_scenarios.GiftCardTests">
        <test-method is-config="true" signature="init()[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:09 IST" name="init" finished-at="2024-02-28T12:37:41 IST" duration-ms="31724" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="negativeAmountTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:43 IST" name="negativeAmountTest" data-provider="amount" finished-at="2024-02-28T12:37:43 IST" duration-ms="368" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[999]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[valid amount in range [1000, 500000]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeAmountTest -->
        <test-method signature="negativeButtonAmountTest(java.lang.Integer,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:43 IST" name="negativeButtonAmountTest" data-provider="amount" finished-at="2024-02-28T12:37:43 IST" duration-ms="31" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[there should be no more than 3 amount options buttons]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeButtonAmountTest -->
        <test-method signature="negativeDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:43 IST" name="negativeDateTest" data-provider="date" finished-at="2024-02-28T12:37:44 IST" duration-ms="602" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2024-02-27]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeDateTest -->
        <test-method signature="negativeDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:44 IST" name="negativeDateTest" data-provider="date" finished-at="2024-02-28T12:37:44 IST" duration-ms="249" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2024-05-01]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeDateTest -->
        <test-method signature="positiveAmounTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:44 IST" name="positiveAmounTest" data-provider="amount" finished-at="2024-02-28T12:37:45 IST" duration-ms="419" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[valid amount in range [1000, 500000]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveAmounTest -->
        <test-method signature="positiveAmounTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:45 IST" name="positiveAmounTest" data-provider="amount" finished-at="2024-02-28T12:37:45 IST" duration-ms="367" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1001]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[valid amount in range [1000, 500000]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveAmounTest -->
        <test-method signature="positiveAmounTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:45 IST" name="positiveAmounTest" data-provider="amount" finished-at="2024-02-28T12:37:45 IST" duration-ms="377" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[499999]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[valid amount in range [1000, 500000]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveAmounTest -->
        <test-method signature="positiveAmounTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:45 IST" name="positiveAmounTest" data-provider="amount" finished-at="2024-02-28T12:37:46 IST" duration-ms="285" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[500000]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[valid amount in range [1000, 500000]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveAmounTest -->
        <test-method signature="positiveButtonAmountTest(java.lang.Integer,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:46 IST" name="positiveButtonAmountTest" data-provider="amount" finished-at="2024-02-28T12:37:46 IST" duration-ms="280" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[the user should be able to order with all three amount option buttons]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveButtonAmountTest -->
        <test-method signature="positiveButtonAmountTest(java.lang.Integer,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:46 IST" name="positiveButtonAmountTest" data-provider="amount" finished-at="2024-02-28T12:37:46 IST" duration-ms="196" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[the user should be able to order with all three amount option buttons]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveButtonAmountTest -->
        <test-method signature="positiveButtonAmountTest(java.lang.Integer,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:46 IST" name="positiveButtonAmountTest" data-provider="amount" finished-at="2024-02-28T12:37:46 IST" duration-ms="191" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[the user should be able to order with all three amount option buttons]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveButtonAmountTest -->
        <test-method signature="positiveDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:46 IST" name="positiveDateTest" data-provider="date" finished-at="2024-02-28T12:37:47 IST" duration-ms="440" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2024-02-28]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveDateTest -->
        <test-method signature="positiveDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:47 IST" name="positiveDateTest" data-provider="date" finished-at="2024-02-28T12:37:47 IST" duration-ms="464" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2024-02-29]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveDateTest -->
        <test-method signature="positiveDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:47 IST" name="positiveDateTest" data-provider="date" finished-at="2024-02-28T12:37:48 IST" duration-ms="666" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2024-04-29]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveDateTest -->
        <test-method signature="positiveDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:48 IST" name="positiveDateTest" data-provider="date" finished-at="2024-02-28T12:37:48 IST" duration-ms="383" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2024-04-30]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveDateTest -->
        <test-method signature="positiveZipCodeTest(java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:48 IST" name="positiveZipCodeTest" data-provider="zip" depends-on-groups="customise_form_test" finished-at="2024-02-28T12:37:51 IST" duration-ms="2282" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[400001]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveZipCodeTest -->
        <test-method signature="positiveZipCodeTest(java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:51 IST" name="positiveZipCodeTest" data-provider="zip" depends-on-groups="customise_form_test" finished-at="2024-02-28T12:37:53 IST" duration-ms="2268" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[500001]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveZipCodeTest -->
        <test-method signature="positiveZipCodeTest(java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:53 IST" name="positiveZipCodeTest" data-provider="zip" depends-on-groups="customise_form_test" finished-at="2024-02-28T12:37:55 IST" duration-ms="2273" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[110001]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveZipCodeTest -->
        <test-method signature="positiveZipCodeTest(java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:55 IST" name="positiveZipCodeTest" data-provider="zip" depends-on-groups="customise_form_test" finished-at="2024-02-28T12:37:58 IST" duration-ms="2405" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[700001]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveZipCodeTest -->
        <test-method signature="positiveZipCodeTest(java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:37:58 IST" name="positiveZipCodeTest" data-provider="zip" depends-on-groups="customise_form_test" finished-at="2024-02-28T12:38:00 IST" duration-ms="2379" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[560001]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveZipCodeTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:00 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:05 IST" duration-ms="4673" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should not be able to fill in a number as a name]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[customer should be able to order a gift card with valid details and customer should not be able to fill in a number as a name expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: customer should be able to order a gift card with valid details and customer should not be able to fill in a number as a name expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertFalse(Assert.java:67)
at test_scenarios.GiftCardTests.negativeCustomerAndRecipientTest(GiftCardTests.java:383)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:05 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:08 IST" duration-ms="3236" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[john.doe@example]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should only be able to fill valid emails of type john.doe@example.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[customer should be able to order a gift card with valid details and customer should only be able to fill valid emails of type john.doe@example.com expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: customer should be able to order a gift card with valid details and customer should only be able to fill valid emails of type john.doe@example.com expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertFalse(Assert.java:67)
at test_scenarios.GiftCardTests.negativeCustomerAndRecipientTest(GiftCardTests.java:383)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:08 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:11 IST" duration-ms="2940" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[email]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should only be able to fill valid emails of type john.doe@example.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:11 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:14 IST" duration-ms="3023" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[john.doe@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1234567890]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should only be able to fill valid phone numbers with 10 digits]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:14 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:17 IST" duration-ms="2925" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[123@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should not be able to fill in a number as a name]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[customer should not be able to fill in a number as a name and customer should be able to order a gift card with valid details expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: customer should not be able to fill in a number as a name and customer should be able to order a gift card with valid details expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertFalse(Assert.java:67)
at test_scenarios.GiftCardTests.negativeCustomerAndRecipientTest(GiftCardTests.java:383)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:17 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:20 IST" duration-ms="2887" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[john.doe@example]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should only be able to fill valid emails of type john.doe@example.com]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[customer should only be able to fill valid emails of type john.doe@example.com and customer should be able to order a gift card with valid details expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: customer should only be able to fill valid emails of type john.doe@example.com and customer should be able to order a gift card with valid details expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertFalse(Assert.java:67)
at test_scenarios.GiftCardTests.negativeCustomerAndRecipientTest(GiftCardTests.java:383)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:20 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:23 IST" duration-ms="2931" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[email]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should only be able to fill valid emails of type john.doe@example.com]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:23 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:26 IST" duration-ms="2802" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[john.doe@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[1234567890]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should only be able to fill valid phone numbers with 10 digits]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:26 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:29 IST" duration-ms="3131" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[john.doe@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[9999]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should only be able to fill valid phone numbers with 10 digits]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="positiveCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:29 IST" name="positiveCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:32 IST" duration-ms="2908" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveCustomerAndRecipientTest -->
        <test-method signature="positiveCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:32 IST" name="positiveCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:35 IST" duration-ms="3014" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[john.doe@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveCustomerAndRecipientTest -->
        <test-method signature="positiveCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:35 IST" name="positiveCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:37 IST" duration-ms="2838" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveCustomerAndRecipientTest -->
        <test-method signature="positiveCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:37 IST" name="positiveCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-02-28T12:38:40 IST" duration-ms="2989" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[john.doe@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveCustomerAndRecipientTest -->
        <test-method is-config="true" signature="destroy()[pri:0, instance:test_scenarios.GiftCardTests@3d51f06e]" started-at="2024-02-28T12:38:40 IST" name="destroy" finished-at="2024-02-28T12:38:44 IST" duration-ms="3655" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
      </class> <!-- test_scenarios.GiftCardTests -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
