<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="38" passed="34" failed="4" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-03-01T10:45:10 IST" name="Regression Suite" finished-at="2024-03-01T10:47:00 IST" duration-ms="109993">
    <groups>
      <group name="customer_and_recipient_details">
        <method signature="GiftCardTests.negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" name="negativeCustomerAndRecipientTest" class="test_scenarios.GiftCardTests"/>
        <method signature="GiftCardTests.positiveCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" name="positiveCustomerAndRecipientTest" class="test_scenarios.GiftCardTests"/>
      </group> <!-- customer_and_recipient_details -->
      <group name="zip_code_test">
        <method signature="GiftCardTests.positiveZipCodeTest(java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" name="positiveZipCodeTest" class="test_scenarios.GiftCardTests"/>
      </group> <!-- zip_code_test -->
      <group name="customise_form_test">
        <method signature="GiftCardTests.negativeAmountTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" name="negativeAmountTest" class="test_scenarios.GiftCardTests"/>
        <method signature="GiftCardTests.negativeButtonAmountTest(java.lang.Integer,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" name="negativeButtonAmountTest" class="test_scenarios.GiftCardTests"/>
        <method signature="GiftCardTests.negativeDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" name="negativeDateTest" class="test_scenarios.GiftCardTests"/>
        <method signature="GiftCardTests.positiveAmounTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" name="positiveAmounTest" class="test_scenarios.GiftCardTests"/>
        <method signature="GiftCardTests.positiveButtonAmountTest(java.lang.Integer,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" name="positiveButtonAmountTest" class="test_scenarios.GiftCardTests"/>
        <method signature="GiftCardTests.positiveDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" name="positiveDateTest" class="test_scenarios.GiftCardTests"/>
      </group> <!-- customise_form_test -->
    </groups>
    <test started-at="2024-03-01T10:45:10 IST" name="Test" finished-at="2024-03-01T10:47:00 IST" duration-ms="109993">
      <class name="test_scenarios.HomePageTest">
        <test-method is-config="true" signature="init()[pri:0, instance:test_scenarios.HomePageTest@647e447]" started-at="2024-03-01T10:45:10 IST" name="init" finished-at="2024-03-01T10:45:29 IST" duration-ms="18752" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="subMenuCount()[pri:0, instance:test_scenarios.HomePageTest@647e447]" started-at="2024-03-01T10:45:29 IST" name="subMenuCount" finished-at="2024-03-01T10:45:37 IST" duration-ms="7617" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subMenuCount -->
        <test-method signature="subMenuItemEmpty()[pri:1, instance:test_scenarios.HomePageTest@647e447]" started-at="2024-03-01T10:45:37 IST" name="subMenuItemEmpty" finished-at="2024-03-01T10:45:37 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subMenuItemEmpty -->
        <test-method is-config="true" signature="destroy()[pri:0, instance:test_scenarios.HomePageTest@647e447]" started-at="2024-03-01T10:45:37 IST" name="destroy" finished-at="2024-03-01T10:45:44 IST" duration-ms="7154" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
      </class> <!-- test_scenarios.HomePageTest -->
      <class name="test_scenarios.BookshelvesTest">
        <test-method is-config="true" signature="init()[pri:0, instance:test_scenarios.BookshelvesTest@68999068]" started-at="2024-03-01T10:45:10 IST" name="init" finished-at="2024-03-01T10:45:32 IST" duration-ms="21728" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="testPriceRange()[pri:0, instance:test_scenarios.BookshelvesTest@68999068]" started-at="2024-03-01T10:45:32 IST" name="testPriceRange" finished-at="2024-03-01T10:45:37 IST" duration-ms="4703" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPriceRange -->
        <test-method signature="testStorageType()[pri:1, instance:test_scenarios.BookshelvesTest@68999068]" started-at="2024-03-01T10:45:37 IST" name="testStorageType" finished-at="2024-03-01T10:45:39 IST" duration-ms="2770" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStorageType -->
        <test-method signature="testExcludeOutOfStock()[pri:2, instance:test_scenarios.BookshelvesTest@68999068]" started-at="2024-03-01T10:45:39 IST" name="testExcludeOutOfStock" finished-at="2024-03-01T10:45:41 IST" duration-ms="2051" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExcludeOutOfStock -->
        <test-method is-config="true" signature="destroy()[pri:0, instance:test_scenarios.BookshelvesTest@68999068]" started-at="2024-03-01T10:45:41 IST" name="destroy" finished-at="2024-03-01T10:45:45 IST" duration-ms="3684" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
      </class> <!-- test_scenarios.BookshelvesTest -->
      <class name="test_scenarios.GiftCardTests">
        <test-method is-config="true" signature="init()[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:10 IST" name="init" finished-at="2024-03-01T10:45:51 IST" duration-ms="40719" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="negativeAmountTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:53 IST" name="negativeAmountTest" data-provider="amount" finished-at="2024-03-01T10:45:53 IST" duration-ms="337" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[999]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[valid amount in range [1000, 500000]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeAmountTest -->
        <test-method signature="negativeButtonAmountTest(java.lang.Integer,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:53 IST" name="negativeButtonAmountTest" data-provider="amount" finished-at="2024-03-01T10:45:53 IST" duration-ms="27" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[there should be no more than 3 amount options buttons]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeButtonAmountTest -->
        <test-method signature="negativeDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:53 IST" name="negativeDateTest" data-provider="date" finished-at="2024-03-01T10:45:54 IST" duration-ms="461" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2024-02-29]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeDateTest -->
        <test-method signature="negativeDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:54 IST" name="negativeDateTest" data-provider="date" finished-at="2024-03-01T10:45:54 IST" duration-ms="348" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2024-06-01]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeDateTest -->
        <test-method signature="positiveAmounTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:54 IST" name="positiveAmounTest" data-provider="amount" finished-at="2024-03-01T10:45:55 IST" duration-ms="396" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[valid amount in range [1000, 500000]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveAmounTest -->
        <test-method signature="positiveAmounTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:55 IST" name="positiveAmounTest" data-provider="amount" finished-at="2024-03-01T10:45:55 IST" duration-ms="381" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1001]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[valid amount in range [1000, 500000]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveAmounTest -->
        <test-method signature="positiveAmounTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:55 IST" name="positiveAmounTest" data-provider="amount" finished-at="2024-03-01T10:45:55 IST" duration-ms="415" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[499999]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[valid amount in range [1000, 500000]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveAmounTest -->
        <test-method signature="positiveAmounTest(java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:55 IST" name="positiveAmounTest" data-provider="amount" finished-at="2024-03-01T10:45:56 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[500000]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[valid amount in range [1000, 500000]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveAmounTest -->
        <test-method signature="positiveButtonAmountTest(java.lang.Integer,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:56 IST" name="positiveButtonAmountTest" data-provider="amount" finished-at="2024-03-01T10:45:56 IST" duration-ms="264" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[the user should be able to order with all three amount option buttons]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveButtonAmountTest -->
        <test-method signature="positiveButtonAmountTest(java.lang.Integer,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:56 IST" name="positiveButtonAmountTest" data-provider="amount" finished-at="2024-03-01T10:45:57 IST" duration-ms="419" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[the user should be able to order with all three amount option buttons]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveButtonAmountTest -->
        <test-method signature="positiveButtonAmountTest(java.lang.Integer,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:57 IST" name="positiveButtonAmountTest" data-provider="amount" finished-at="2024-03-01T10:45:57 IST" duration-ms="750" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[the user should be able to order with all three amount option buttons]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveButtonAmountTest -->
        <test-method signature="positiveDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:58 IST" name="positiveDateTest" data-provider="date" finished-at="2024-03-01T10:45:58 IST" duration-ms="695" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2024-03-01]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveDateTest -->
        <test-method signature="positiveDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:58 IST" name="positiveDateTest" data-provider="date" finished-at="2024-03-01T10:45:59 IST" duration-ms="431" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2024-03-02]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveDateTest -->
        <test-method signature="positiveDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:59 IST" name="positiveDateTest" data-provider="date" finished-at="2024-03-01T10:45:59 IST" duration-ms="635" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2024-05-30]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveDateTest -->
        <test-method signature="positiveDateTest(java.time.LocalDate)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:45:59 IST" name="positiveDateTest" data-provider="date" finished-at="2024-03-01T10:46:00 IST" duration-ms="474" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2024-05-31]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveDateTest -->
        <test-method signature="positiveZipCodeTest(java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:00 IST" name="positiveZipCodeTest" data-provider="zip" depends-on-groups="customise_form_test" finished-at="2024-03-01T10:46:02 IST" duration-ms="2324" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[400001]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveZipCodeTest -->
        <test-method signature="positiveZipCodeTest(java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:02 IST" name="positiveZipCodeTest" data-provider="zip" depends-on-groups="customise_form_test" finished-at="2024-03-01T10:46:04 IST" duration-ms="2271" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[500001]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveZipCodeTest -->
        <test-method signature="positiveZipCodeTest(java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:04 IST" name="positiveZipCodeTest" data-provider="zip" depends-on-groups="customise_form_test" finished-at="2024-03-01T10:46:07 IST" duration-ms="2333" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[110001]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveZipCodeTest -->
        <test-method signature="positiveZipCodeTest(java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:07 IST" name="positiveZipCodeTest" data-provider="zip" depends-on-groups="customise_form_test" finished-at="2024-03-01T10:46:09 IST" duration-ms="2302" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[700001]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveZipCodeTest -->
        <test-method signature="positiveZipCodeTest(java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:09 IST" name="positiveZipCodeTest" data-provider="zip" depends-on-groups="customise_form_test" finished-at="2024-03-01T10:46:11 IST" duration-ms="2275" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[560001]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveZipCodeTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:11 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:15 IST" duration-ms="3204" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should not be able to fill in a number as a name]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[customer should be able to order a gift card with valid details and customer should not be able to fill in a number as a name expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: customer should be able to order a gift card with valid details and customer should not be able to fill in a number as a name expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertFalse(Assert.java:67)
at test_scenarios.GiftCardTests.negativeCustomerAndRecipientTest(GiftCardTests.java:383)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:15 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:18 IST" duration-ms="2958" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[john.doe@example]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should only be able to fill valid emails of type john.doe@example.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[customer should be able to order a gift card with valid details and customer should only be able to fill valid emails of type john.doe@example.com expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: customer should be able to order a gift card with valid details and customer should only be able to fill valid emails of type john.doe@example.com expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertFalse(Assert.java:67)
at test_scenarios.GiftCardTests.negativeCustomerAndRecipientTest(GiftCardTests.java:383)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:18 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:21 IST" duration-ms="3011" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[email]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should only be able to fill valid emails of type john.doe@example.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:21 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:24 IST" duration-ms="3088" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[john.doe@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1234567890]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should only be able to fill valid phone numbers with 10 digits]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:24 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:27 IST" duration-ms="3323" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[123@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should not be able to fill in a number as a name]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[customer should not be able to fill in a number as a name and customer should be able to order a gift card with valid details expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: customer should not be able to fill in a number as a name and customer should be able to order a gift card with valid details expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertFalse(Assert.java:67)
at test_scenarios.GiftCardTests.negativeCustomerAndRecipientTest(GiftCardTests.java:383)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:27 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:30 IST" duration-ms="3315" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[john.doe@example]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should only be able to fill valid emails of type john.doe@example.com]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[customer should only be able to fill valid emails of type john.doe@example.com and customer should be able to order a gift card with valid details expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: customer should only be able to fill valid emails of type john.doe@example.com and customer should be able to order a gift card with valid details expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertFalse(Assert.java:67)
at test_scenarios.GiftCardTests.negativeCustomerAndRecipientTest(GiftCardTests.java:383)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:30 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:33 IST" duration-ms="3032" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[email]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should only be able to fill valid emails of type john.doe@example.com]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:33 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:37 IST" duration-ms="3473" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[john.doe@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[1234567890]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should only be able to fill valid phone numbers with 10 digits]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="negativeCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:37 IST" name="negativeCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:40 IST" duration-ms="3273" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[john.doe@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[9999]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should only be able to fill valid phone numbers with 10 digits]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeCustomerAndRecipientTest -->
        <test-method signature="positiveCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:40 IST" name="positiveCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:44 IST" duration-ms="3637" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveCustomerAndRecipientTest -->
        <test-method signature="positiveCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:44 IST" name="positiveCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:47 IST" duration-ms="3221" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[john.doe@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveCustomerAndRecipientTest -->
        <test-method signature="positiveCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:47 IST" name="positiveCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:50 IST" duration-ms="3021" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveCustomerAndRecipientTest -->
        <test-method signature="positiveCustomerAndRecipientTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:50 IST" name="positiveCustomerAndRecipientTest" data-provider="customer_and_recipient" depends-on-groups="zip_code_test" finished-at="2024-03-01T10:46:54 IST" duration-ms="3595" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[John Doe]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[john.doe@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9999999999]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Jane Mason]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[jane.mason@example.com]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[7033333067]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[somewhere, over the rainbows]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[customer should be able to order a gift card with valid details]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveCustomerAndRecipientTest -->
        <test-method is-config="true" signature="destroy()[pri:0, instance:test_scenarios.GiftCardTests@291ae]" started-at="2024-03-01T10:46:54 IST" name="destroy" finished-at="2024-03-01T10:47:00 IST" duration-ms="6397" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
      </class> <!-- test_scenarios.GiftCardTests -->
    </test> <!-- Test -->
  </suite> <!-- Regression Suite -->
</testng-results>
